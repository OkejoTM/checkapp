version: '3.8'

services:
  checkapp_api:
    container_name: checkapp_api
    image: ${CI_REGISTRY_IMAGE}/backend:latest
    ports:
      - "5000:80"
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
    networks:
      - checkapp-network
    restart: unless-stopped

  checkapp_frontend:
    container_name: checkapp_frontend
    image: ${CI_REGISTRY_IMAGE}/frontend:latest
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}
      - NEXT_PUBLIC_API_BASE_URL=http://${VPS_HOST}:5000
    depends_on:
      - checkapp_api
    networks:
      - checkapp-network
    restart: unless-stopped

  checkapp_db:
    container_name: checkapp_db
    image: postgres:16.3
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./data:/var/lib/postgresql/data
    networks:
      - checkapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5


networks:
  checkapp-network:
    driver: bridge