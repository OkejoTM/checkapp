version: '3.8'

services:
  checkapp_api:
    container_name: checkapp_api
    build:
      context: ./backend/CheckApi
      dockerfile: ./CheckApi.Api/Dockerfile
    ports:
      - "5000:80"    
    env_file:
      - .env
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=${ASPNETCORE_URLS}      
    depends_on:
      checkapp_db:
        condition: service_healthy
    networks:
      - checkapp-network

  checkapp_frontend:
    container_name: checkapp_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - API_BASE_URL=${API_BASE_URL}
    depends_on:
      - checkapp_api
    networks:
      - checkapp-network

  checkapp_db:
    container_name: checkapp_db
    image: postgres:16.3
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - checkapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  postgres_data:    

networks:
  checkapp-network:
    driver: bridge